using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

namespace LanguageTools.Backend {
    public class LemmaRepository : IPaginated<Noun> {
        private DbCommand insertCmd, updateCmd, deleteCmd, countCmd, selectByIdCmd, selectPageOfDataCmd;
        protected LemmaDatabase Database { get; private set; }

        public struct BulkItem {
            public string Word;
            public string Gender;
        }

        public LemmaRepository(LemmaDatabase db) {
            this.Database = db;
            insertCmd = db.CreateCommand("insert into lemma(word, gender) values(@word, @gender)");
            insertCmd.Prepare();
            updateCmd = db.CreateCommand("update lemma set word=@word, gender=@gender where id=@id");
            updateCmd.Prepare();
            deleteCmd = db.CreateCommand("delete from lemma where id=@id");
            deleteCmd.Prepare();
            countCmd = db.CreateCommand("select count(*) from lemma");
            countCmd.Prepare();
            selectByIdCmd = db.CreateCommand("select * from lemma where id=@id");
            selectByIdCmd.Prepare();
            selectPageOfDataCmd = db.CreateCommand("select * from lemma limit @pageSize offset @offset");
            selectPageOfDataCmd.Prepare();
        }

        public int Count {
            get {
                return Convert.ToInt32(countCmd.ExecuteScalar());
            }
        }

        public Noun GetById(int id) {
            selectByIdCmd.Parameters.Add(Database.CreateParameter("@id", id, selectByIdCmd));
            using(DbDataReader reader = selectByIdCmd.ExecuteReader(CommandBehavior.SingleRow)) {
                if(reader.Read()) {
                    return ConstructLemmaFromRecord(reader);
                } else {
                    return null;
                }
            }
        }

        public Noun FindOne(ISqlSpecification<Noun> spec) {
            using(DbDataReader reader = Database.ExecuteReader("select * from lemma where " + spec.Sql, spec.Parameters, CommandBehavior.SingleRow)) {
                if(reader.Read()) {
                    return ConstructLemmaFromRecord(reader);
                } else {
                    return null;
                }
            }
        }

        public List<Noun> FindAll(ISqlSpecification<Noun> spec) {
            List<Noun> list = new List<Noun>();
            using(DbDataReader reader = Database.ExecuteReader("select * from lemma where " + spec.Sql, spec.Parameters, CommandBehavior.Default)) {
                while(reader.Read()) {
                    list.Add(ConstructLemmaFromRecord(reader));
                }
            }
            return list;
        }

        /// <summary>
        /// Adds a list of items, provided as an array of structs. This method does no validation at all, and is supposed to be used
        /// for performance reasons only.
        /// </summary>
        /// <param name="items"></param>
        public void AddBulk(IEnumerable<BulkItem> items) {
            foreach(BulkItem item in items) {
                insertCmd.Parameters.Add(Database.CreateParameter("@word", item.Word, insertCmd));
                insertCmd.Parameters.Add(Database.CreateParameter("@gender", item.Gender, insertCmd));
                insertCmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Adds the given Lemma to the repository. The Id of the lemma is autogenerated.
        /// </summary>
        /// <param name="i"></param>
        public void Add(Noun i) {
            insertCmd.Parameters.Add(Database.CreateParameter("@word", i.Lemma, insertCmd));
            insertCmd.Parameters.Add(Database.CreateParameter("@gender", WordGenderConvert.ToString(i.Gender), insertCmd));
            int id = insertCmd.ExecuteNonQuery();
            i.Id = id;
        }

        /// <summary>
        /// Update the given Lemma in the repository. The Lemma must already exist!!
        /// </summary>
        /// <param name="i"></param>
        public void Update(Noun i) {
            updateCmd.Parameters.Add(Database.CreateParameter("@id", i.Id, updateCmd));
            updateCmd.Parameters.Add(Database.CreateParameter("@word", i.Lemma, updateCmd));
            updateCmd.Parameters.Add(Database.CreateParameter("@gender", WordGenderConvert.ToString(i.Gender), updateCmd));
            updateCmd.ExecuteNonQuery();
        }

        public void RemoveById(int id) {
            deleteCmd.Parameters.Add(Database.CreateParameter("id", id, deleteCmd));
            deleteCmd.ExecuteNonQuery();
        }

        public void Remove(Noun l) {
            RemoveById(l.Id);
        }

        public List<Noun> SupplyPageOfData(int pageIndex, int pageSize) {
            List<Noun> result = new List<Noun>();
            // Retrieve the specified number of rows from the database, starting
            // with the row specified by the lowerPageBoundary parameter.
            selectPageOfDataCmd.Parameters.Add(Database.CreateParameter("@pageSize", pageSize, selectPageOfDataCmd));
            selectPageOfDataCmd.Parameters.Add(Database.CreateParameter("@offset", pageIndex * pageSize, selectPageOfDataCmd));
            using(DbDataReader reader = selectPageOfDataCmd.ExecuteReader()) {
                while(reader.Read()) {
                    result.Add(ConstructLemmaFromRecord(reader));
                }
            }
            return result;
        }

        private static Noun ConstructLemmaFromRecord(DbDataReader reader) {
            Noun l = new Noun();
            l.Id = reader.GetInt32(0);
            l.Lemma = reader.GetString(1);
            l.Gender = WordGenderConvert.ToGender(reader.GetString(2));
            return l;
        }
    }
}